Online Playgroun: http://swiftstub.com/
Array: https://developer.apple.com/library/mac/documentation/General/Reference/SwiftStandardLibraryReference/Array.html

############################### Messagelist
struct message {

	var id:UInt64 = 0
	var name:String = ""
	var message:String = ""
	var time:String = ""
}

//messagelist
class message_list {
    
    //vars
    var id:UInt64 = 0
    
    //client db
    var db : Array<message> = Array<message>()
    
    //get message count
    func get_message_count() -> (Int) {
        return db.count
    }
    
    //add message to list
    func add_message( _name: String, _message: String) -> (status: Boolean, message: String) {
        
        //generate timestamp
        var timestamp = NSDateFormatter.localizedStringFromDate(NSDate(), dateStyle: .MediumStyle, timeStyle: .ShortStyle)
        
        //generate tmp message struct
        id += 1
        var tmp_message = message(id: id,name: _name, message: _message, time: timestamp)
        
        //add message to db
        db.append(tmp_message)
        return (1,"message from \(_name) with id \(id) successfully added - \(_message)")
    }
    
    //get last message
    func get_last_message() -> (message) {
        
        return db[db.count-1]
    }
    
}

var test = message_list()
println(test.get_message_count())

var add = test.add_message("hans",_message: "hallooooo")
println(add.message)
add = test.add_message("hans",_message: "du kleiner homo")
println(add.message)
add = test.add_message("hans",_message: "du kleiner homo")
println(add.message)
add = test.add_message("hans",_message: "du kleiner homo")
println(add.message)
add = test.add_message("hans",_message: "du kleiner homo")
println(add.message)


println(test.get_message_count())
println(test.get_last_message().time)










############################### Clientlist
struct client {

	var id:Int = 0
	var ip:String = ""
	var port:Int = 0
	var name:String = ""
	var type:String = ""
	var time:String = ""
	var error:Int = 0
}

//clientlist
class client_list {
    
    //vars
    let max_clients = 100
    var id:Int = 0
    
    //client db
    var db : Array<client> = Array<client>()
    
    //get client count
    func get_client_count() -> (Int) {
        return db.count
    }
    
    //get client list
    func get_client_list() -> (Array<client>) {
        return db
    }
    
    //add client to list.
    func add_client(_ip: String, _port: Int, _name: String, _type: String) -> (status: Boolean, message: String) {
        
        //generate timestamp
        var timestamp = NSDateFormatter.localizedStringFromDate(NSDate(), dateStyle: .MediumStyle, timeStyle: .ShortStyle)
        
        //check if exists
        var members = db.filter{$0.name == _name}.count
        if  members != 0 {
           return (0,"client \(_name) already exists")
        }
        
        //generate tmp client struct
        id += 1
        var tmp_client = client(id: id,ip: _ip, port: _port, name: _name, type: _type, time: timestamp, error: 0)
        
        //add client to db
        if db.count < max_clients {
            db.append(tmp_client)
            return (1,"client \(_name) with id \(id) successfully added")
        }
        else {
            return (0,"max. number of clients reached")
        }
        
    }
    
    //rem client from list
    func rem_client(_ip: String, _port: Int, _name: String) -> (status: Boolean, message: String) {
        
        //check if exists
        var members = db.filter{$0.name == _name}.count
        if  members == 0 {
            return (0,"client \(_name) not exists")
        }
        
        //remove from list
        for (index, value) in enumerate(db) {
            if value.name == _name {
                var remove = db.removeAtIndex(index)
            }
        }
        
        
        //check if exists
        members = db.filter{$0.name == _name}.count
        if  members != 0 {
            return (0,"client \(_name) not removed")
        }
        else {
            return (1,"client \(_name) successfully removed")
        }
    }
    
}



var test = client_list()
println(test.get_client_count())
var add = test.add_client("7722",_port: 33,_name: "jan",_type: "client")
println("\(add.message)")
println(test.get_client_count())
add = test.add_client("7722",_port: 33,_name: "hans",_type: "client")
println("\(add.message)")
println(test.get_client_count())
add = test.add_client("7722",_port: 33,_name: "isa",_type: "client")
println("\(add.message)")
println(test.get_client_count())
add = test.add_client("7722",_port: 33,_name: "felix",_type: "client")
println("\(add.message)")
println(test.get_client_count())

add = test.rem_client("7722",_port: 33,_name: "jan")
println("\(add.message)")
println(test.get_client_count())




